// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String          @id @default(nanoid(10))
  email         String          @unique
  name          String?
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  role          String?
  banned        Boolean?
  banReason     String?
  banExpires    DateTime?
  isAnonymous   Boolean?
  sessions      Session[]
  accounts      Account[]
  notifi        Notifi[]
  notifiRead    NotifiRead[]
  couponConsume CouponConsume[]
  rating        Rating[]
  checkout      Checkout[]
  complain      Complain[]

  @@map("user")
}

model Session {
  id             String   @id
  expiresAt      DateTime
  token          String
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Product {
  id                 String            @id @unique @default(nanoid(10))
  name               String
  summary            String            @db.Text
  slug               String            @unique
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  desc               String            @db.Text
  price              Float
  discount           Float
  priceAfterDiscount Float             @default(0)
  productImage       ProductImage[]
  stockandsize       StockAndSize[]
  productDetails     ProductDetails[]
  checkoutItem       CheckoutItem[]
  rating             Rating[]
  complain           Complain[]
  promo              PromoAndProduct[]
  selling            Selling[]

  // Efisien untuk pencarian berdasarkan nama
  // Efisien untuk pencarian berdasarkan rentang harga
  @@index([name], type: Hash)
  @@index([price], type: BTree)
  @@index([slug], type: Hash)
  @@index([discount], type: BTree)
}

model ProductImage {
  id        String   @id @unique @default(nanoid(10))
  url       String   @db.Text
  thumbnail String   @db.Text
  caption   String?
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId], type: Hash)
  @@index([url], type: BTree)
}

model StockAndSize {
  id        String   @id @unique @default(nanoid(10))
  name      String
  amount    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  // Efisien untuk pencarian berdasarkan ukuran
  @@index([name], type: Hash)
  @@index([productId], type: Hash)
}

model Category {
  id             String           @id @unique @default(nanoid(10))
  name           String           @unique
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  subcategories  Subcategory[]
  productDetails ProductDetails[]

  // Efisien untuk pencarian berdasarkan nama kategori
  @@index([name], type: Hash)
}

model Subcategory {
  id             String           @id @unique @default(nanoid(10))
  name           String           @unique
  categoryId     String
  category       Category         @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  productDetails ProductDetails[]

  // Efisien untuk pencarian berdasarkan nama subkategori
  @@index([name], type: Hash)
  @@index([categoryId], type: Hash)
}

model ProductDetails {
  productId     String
  categoryId    String
  subcategoryId String
  product       Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  category      Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)

  // Indeks untuk pencarian berdasarkan kategori
  // Indeks untuk pencarian berdasarkan subkategori
  @@id([productId, subcategoryId, categoryId])
  @@index([categoryId], type: Hash)
  @@index([subcategoryId], type: Hash)
}

model Selling {
  id        String   @id @unique @default(nanoid(10))
  amount    Int
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  updatedAt DateTime @updatedAt
  name      String
  email     String

  @@index([email], type: Hash)
  @@index([id], type: Hash)
  @@index([productId], type: Hash)
}

model Rating {
  id        String   @id @unique @default(nanoid(10))
  value     Float
  message   String
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id], type: Hash)
  @@index([productId], type: Hash)
}

enum CheckoutStatus {
  pending
  paid
  cancel
  success
  shipped
}

model Checkout {
  id          String         @id @unique @default(nanoid(10))
  price       Float
  status      CheckoutStatus @default(pending)
  userId      String
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  quantity    Int
  Notifi      Notifi[]
  Complain    Complain[]
  checoutItem CheckoutItem[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@index([id], type: Hash)
}

model CheckoutItem {
  id         String   @id @unique @default(nanoid(10))
  quantity   Int
  price      Float
  size       String
  productId  String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  checkoutId String
  checkout   Checkout @relation(fields: [checkoutId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([checkoutId], type: Hash)
  @@index([productId], type: Hash)
  @@index([id], type: Hash)
}

enum NotificationStatus {
  PaymentUpdate // Pembaruan atau notifikasi terkait pembayaran
  Promo // Promosi atau penawaran
  OrderPending // Pesanan sedang menunggu proses atau konfirmasi
  OrderShipped // Barang sudah dikirim atau pembaruan penerima
  Rating // Notifikasi untuk rating produk atau layanan
  ComplaintFiled // Keluhan telah diajukan atau pembaruan keluhan
  OrderCanceled // Pesanan dibatalkan
}

model Notifi {
  id         String             @id @unique @default(nanoid(10))
  status     NotificationStatus @default(OrderPending)
  createdAt  DateTime           @default(now())
  message    String
  checkoutId String?
  checkout   Checkout?          @relation(fields: [checkoutId], references: [id], onDelete: Cascade)
  userId     String?
  user       User?              @relation(fields: [userId], references: [id], onDelete: Cascade)
  notifiRead NotifiRead[]

  @@index([userId], type: Hash)
  @@index([id], type: Hash)
}

model NotifiRead {
  id        String   @id @default(nanoid(10))
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  isRead    Boolean  @default(false)
  notifiId  String
  notifi    Notifi   @relation(fields: [notifiId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId], type: Hash)
  @@index([id], type: Hash)
  @@index([notifiId], type: Hash)
}

model Complain {
  id         String   @id @unique @default(nanoid(10))
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  checkoutId String
  checkout   Checkout @relation(fields: [checkoutId], references: [id])
  Product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([userId], type: Hash)
  @@index([id], type: Hash)
  @@index([productId], type: Hash)
  @@index([checkoutId], type: Hash)
}

model Promo {
  id        String            @id @unique @default(nanoid(10))
  title     String
  image     String
  slug      String
  desc      String
  discount  Int
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  product   PromoAndProduct[]
}

model PromoAndProduct {
  promoId   String
  promo     Promo   @relation(fields: [promoId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([productId, promoId])
}

model Coupon {
  id            String          @id @unique @default(nanoid(10))
  code          String
  title         String
  amount        Int?
  minOrder      Int             @default(0)
  desc          String
  tac           String
  expiresAt     DateTime
  discount      Float           @default(0.1)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  couponConsume CouponConsume[]
}

model CouponConsume {
  couponId String
  coupon   Coupon @relation(fields: [couponId], references: [id], onDelete: Cascade)
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([couponId, userId])
  @@index([couponId], type: Hash)
  @@index([userId], type: Hash)
}

model FlashSale {
  id        String   @id @default(cuid())
  startTime DateTime
  endTime   DateTime
  createdAt DateTime @default(now())
}

model Post {
  id        String   @id @default(nanoid(10))
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
